state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") %>%
mutate(size = case_when(`Domain Category` == "INVENTORY OF HOGS: (1,000 OR MORE HEAD)" ~ 1,
`Domain Category` == "INVENTORY OF HOGS: (500 TO 999 HEAD)" ~ 0.5,
`Domain Category` == "INVENTORY OF HOGS: (200 TO 499 HEAD)" ~ 0.35,
`Domain Category` == "INVENTORY OF HOGS: (100 TO 199 HEAD)" ~ 0.05,
TRUE ~ 0.01))%>%
group_by(state_county, size) %>%
summarize(Value = sum(Value)) %>%
ungroup() %>%
mutate(Value = round(Value)/5) %>%
dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i],
size = dta$size[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), alpha = 0.5, shape=20, color = "blue", fill = "blue") +
scale_size_continuous(range = c(1, 4)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), alpha = 0.5, shape=20, color = "blue", fill = "blue") +
scale_size_continuous(range = c(1, 2)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), alpha = 0.5, shape=20, color = "blue", fill = "blue") +
scale_size_continuous(range = c(1, 5)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), alpha = 0.5, shape=20, color = "blue", fill = "blue") +
scale_size_continuous(range = c(1, 2)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), alpha = 0.5, shape=20, color = "blue", fill = "blue") +
scale_size_continuous(range = c(0.1, 2)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), alpha = 0.5, shape=20, color = "blue", fill = "blue") +
scale_size_continuous(range = c(0.01, 2)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), alpha = 0.25, shape=20, color = "blue", fill = "blue") +
scale_size_continuous(range = c(0.01, 2)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
# Read data
dta <- read_csv("Data/7) Market hog inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
dplyr::select(State, Value, County, `Domain Category`) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") %>%
group_by(state_county) %>%
summarize(Value = sum(Value)) %>%
ungroup() %>%
mutate(Value = round(Value/10)) %>%
dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, color = "blue", alpha = 0.5, size = 1) +
scale_size_continuous(range = c(0.1, 1)) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, color = "blue", alpha = 0.5, size = 1) +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.position="none")
d_inv
knitr::opts_chunk$set(echo=FALSE, fig.keep='high', out.width = '95%', fig.align = 'center', dev='cairo_pdf', warning = FALSE, message = FALSE)
#Load some packages
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(lubridate)
pacman::p_load(readxl)
pacman::p_load(xlsx)
pacman::p_load(Quandl)
pacman::p_load(viridis)
pacman::p_load(Cairo)
options(kableExtra.latex.load_packages = TRUE)
pacman::p_load(kableExtra)
pacman::p_load(ggmap)
pacman::p_load(sp)
pacman::p_load(usmap)
pacman::p_load(maps)
pacman::p_load(magick)
#Authentification
#Quandl.api_key("2xcmYFJoJKuEDwawuV7J")
#Basic setup for figures
source("Figures/Graph parameters.r")
read_excel("Data/7) Slaughter.xlsx", sheet = "Data sheet (machine readable)")
read_excel("Data/7) Slaughter.xlsx", sheet = "Data sheet (machine readable)") %>%
dplyr::filter(`Time period description` == "Month", Commodity == "Chickens, Broilers")
read_excel("Data/7) Slaughter.xlsx", sheet = "Data sheet (machine readable)") %>%
dplyr::filter(`Time period description` == "Month", Commodity == "Chickens, Broilers")
dta <- read_excel("Data/7) Slaughter.xlsx", sheet = "Data sheet (machine readable)") %>%
dplyr::filter(`Time period description` == "Month", Commodity == "Chickens, Broilers") %>%
dplyr::select(Date, Value) %>%
mutate(Date = as.Date(Date), year = year(Date), Value = Value/1000) %>%
group_by(year) %>%
summarize(Value = sum(Value)) %>%
dplyr::filter(year < year(Sys.time()))
plot_slaughter <- ggplot(dta, aes(x = year, y = Value)) +
geom_line(color = "blue", size = 1) +
ylab("Broiler chicken slaughter (million head)") +
scale_x_continuous(breaks = seq(1960, 2020, by = 5)) +
theme_bw() + mytheme +
theme(axis.title.x=element_blank(), axis.line = element_line(color='black'))
plot_slaughter
dta <- read_excel("Data/8) Poultry.xlsx", sheet = "Data sheet (machine readable)") %>%
dplyr::filter(`Time description` == "Annual",
Commodity == "Total poultry") %>%
dplyr::select(Year, Value) %>%
dplyr::filter(Year < year(Sys.time()))
plot_poultry <- ggplot(dta, aes(x = Year, y = Value)) +
geom_line(color = "blue", size = 1) +
ylab("Poultry production (million pounds)") +
scale_x_continuous(breaks = seq(1960, 2020, by = 5)) +
theme_bw() + mytheme +
theme(axis.title.x=element_blank(), axis.line = element_line(color='black'))
plot_poultry
knitr::opts_chunk$set(echo=FALSE, fig.keep='high', out.width = '95%', fig.align = 'center', dev='cairo_pdf', warning = FALSE, message = FALSE)
#Load some packages
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(lubridate)
pacman::p_load(readxl)
pacman::p_load(xlsx)
pacman::p_load(Quandl)
pacman::p_load(viridis)
pacman::p_load(Cairo)
options(kableExtra.latex.load_packages = TRUE)
pacman::p_load(kableExtra)
pacman::p_load(ggmap)
pacman::p_load(sp)
pacman::p_load(usmap)
pacman::p_load(maps)
pacman::p_load(magick)
#remove warnings
options(warn=-1)
#Authentification
#Quandl.api_key("2xcmYFJoJKuEDwawuV7J")
#Basic setup for figures
source("Figures/Graph parameters.r")
dta <- read_csv("Data/8) Broiler inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
dplyr::select(State, Value, `Ag District`, County) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)/5),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "leflore", "le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk")) %>%
dplyr::filter(!is.na(Value), Value>0)
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
i
countyShapes[countyShapes$state_county == dta$state_county[i], ]
dta$state_county[i]
dta <- read_csv("Data/8) Broiler inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
dplyr::select(State, Value, `Ag District`, County) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)/5),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "leflore", "le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien")) %>%
dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25, alpha = 0.5, color = "blue") +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
d_inv
knitr::opts_chunk$set(echo=FALSE, fig.keep='high', out.width = '95%', fig.align = 'center', dev='cairo_pdf', warning = FALSE, message = FALSE)
#Load some packages
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(lubridate)
pacman::p_load(readxl)
pacman::p_load(xlsx)
pacman::p_load(Quandl)
pacman::p_load(viridis)
pacman::p_load(Cairo)
options(kableExtra.latex.load_packages = TRUE)
pacman::p_load(kableExtra)
pacman::p_load(ggmap)
pacman::p_load(sp)
pacman::p_load(usmap)
pacman::p_load(maps)
pacman::p_load(magick)
#remove warnings
options(warn=-1)
#Authentification
#Quandl.api_key("2xcmYFJoJKuEDwawuV7J")
#Basic setup for figures
source("Figures/Graph parameters.r")
dta <- read_excel("Data/8) Wholesale chicken prices.xlsx", sheet = "Data sheet (machine readable)")
dta <- dta %>%
filter(Commodity %in% c("Chickens, Breast with ribs", "Chickens, Leg quarters")) %>%
dplyr::select(Date, Commodity, Value) %>%
mutate(Value = as.numeric(Value)/100,
Date = as.Date(Date))
knitr::opts_chunk$set(echo=FALSE, fig.keep='high', out.width = '95%', fig.align = 'center', dev='cairo_pdf', warning = FALSE, message = FALSE)
#Load some packages
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(lubridate)
pacman::p_load(readxl)
pacman::p_load(xlsx)
pacman::p_load(Quandl)
pacman::p_load(viridis)
pacman::p_load(Cairo)
options(kableExtra.latex.load_packages = TRUE)
pacman::p_load(kableExtra)
pacman::p_load(ggmap)
pacman::p_load(sp)
pacman::p_load(usmap)
pacman::p_load(maps)
pacman::p_load(magick)
#Authentification
#Quandl.api_key("2xcmYFJoJKuEDwawuV7J")
#Basic setup for figures
source("Figures/Graph parameters.r")
download.file("https://www.ers.usda.gov/webdocs/DataFiles/50472/mtpcc.xls", "Data/8) Per capita consumption.xls", method = "curl")
read_excel("Data/8) Per capita consumption.xls", sheet = "Retail", skip = 2)
read_excel("Data/8) Per capita consumption.xls", sheet = "Retail", skip = 1)
read_excel("Data/8) Per capita consumption.xls", sheet = "Retail", skip = 2)
dta <- read_excel("Data/8) Per capita consumption.xls", sheet = "Retail", skip = 2)
dta
dta %>%
dplyr::select(X__1, Beef, Pork, Total4__1)
dta %>%
dplyr::select(X__1, Beef, Pork, Total4__1) %>%
rename(Date = X__1, Chicken = Total4__1) %>%
mutate(Date = as.numeric(Date), Beef = as.numeric(Beef), Pork = as.numeric(Pork), Chicken = as.numeric(Chicken))
dta %>%
dplyr::select(X__1, Beef, Pork, Total4__1) %>%
rename(Date = X__1, Chicken = Total4__1) %>%
mutate(Date = as.numeric(Date), Beef = as.numeric(Beef), Pork = as.numeric(Pork), Chicken = as.numeric(Chicken)) %>%
dplyr::filter(!is.na(Date))
dta <- dta %>%
dplyr::select(X__1, Beef, Pork, Total4__1) %>%
rename(Date = X__1, Chicken = Total4__1) %>%
mutate(Date = as.numeric(Date), Beef = as.numeric(Beef), Pork = as.numeric(Pork), Chicken = as.numeric(Chicken)) %>%
dplyr::filter(!is.na(Date))
gather(var, value, -Date)
dta %>% gather(var, value, -Date)
dta <- dta %>% gather(var, value, -Date)
ggplot(data=dta, aes(x=Date, y=Value, color=var)) +
geom_line(size=1)
ggplot(data=dta, aes(x=Date, y=value, color=var)) +
geom_line(size=1)
ggplot(data=dta, aes(x=Date, y=value, color=var)) +
geom_line(size=1) +
ylab("Pounds per capita") +
scale_x_date(date_breaks="5 year", date_minor_breaks="1 year", labels=date_format("%Y"), expand = c(0,0))
ggplot(data=dta, aes(x=Date, y=value, color=var)) +
geom_line(size=1) +
ylab("Pounds per capita") +
scale_x_continuous(breaks=5, minor_breaks=1, expand = c(0,0))
ggplot(data=dta, aes(x=Date, y=value, color=var)) +
geom_line(size=1) +
ylab("Pounds per capita") +
scale_x_continuous(breaks=seq(1910, 2020, by = 5), minor_breaks=seq(1909, 2020, by = 1), expand = c(0,0))
ggplot(data=dta, aes(x=Date, y=value, color=var)) +
geom_line(size=1) +
ylab("Pounds per capita") +
scale_x_continuous(breaks=seq(1910, 2020, by = 5), minor_breaks=seq(1909, 2020, by = 1), expand = c(0,0)) +
scale_color_manual(values = viridis(4)[c(1:3)]) +
theme_bw()+ mytheme +
theme(axis.title.x=element_blank(),
legend.position=c(0.15,0.90),
axis.line.x = element_line(color='black'),
axis.line.y = element_line(color='black'))
