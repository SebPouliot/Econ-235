state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") %>%
group_by(state_county) %>%
summarize(Value = sum(Value)) %>%
ungroup() %>%
mutate(Value = round(Value/10)) %>%
dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25, alpha = 0.5, color = "blue") +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
d_inv
dta <- read_csv("Data/7) Cattle inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
dplyr::select(State, Value, `Ag District`, County) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") %>%
group_by(state_county) %>%
summarize(Value = sum(Value)) %>%
ungroup() %>%
mutate(Value = round(Value/25)) %>%
dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25, alpha = 0.5, color = "blue") +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
d_inv
dta <- read_csv("Data/7) Cattle on feed by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
dplyr::select(State, Value, `Ag District`, County) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") %>%
group_by(state_county) %>%
summarize(Value = sum(Value)) %>%
ungroup() %>%
mutate(Value = round(Value/25)) %>%
dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25, alpha = 0.5, color = "blue") +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
d_inv
# Read data
dta <- read_csv("Data/7) Cattle on feed by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
dplyr::select(State, Value, `Ag District`, County) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") %>%
group_by(state_county) %>%
summarize(Value = sum(Value)) %>%
ungroup() %>%
mutate(Value = round(Value/10)) %>%
dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25, alpha = 0.5, color = "blue") +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
d_inv
dta <- read_csv("Data/7) Cattle on feed by county.csv")
dta
View(dta)
dta <- read_csv("Data/7) Cattle inventory by county.csv")
dta
View(dta)
dta <- read_csv("Data/7) Cattle inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
mutate(size = case_when(`Domain Category` = "INVENTORY OF CATTLE, INCL CALVES: (1 TO 9 HEAD)" ~ 5/750,
`Domain Category` = "INVENTORY OF CATTLE, INCL CALVES: (10 TO 19 HEAD)" ~ 15/750,
`Domain Category` = "INVENTORY OF CATTLE, INCL CALVES: (20 TO 49 HEAD)" ~ 35/750,
`Domain Category` = "INVENTORY OF CATTLE, INCL CALVES: (50 TO 99 HEAD)" ~ 75/750,
`Domain Category` = "INVENTORY OF CATTLE, INCL CALVES: (100 TO 199 HEAD)" ~ 150/750,
`Domain Category` = "INVENTORY OF CATTLE, INCL CALVES: (200 TO 499 HEAD)" ~ 350/750,
`Domain Category` = "INVENTORY OF CATTLE, INCL CALVES: (500 OR MORE HEAD)" ~ 750/750)) %>%
dplyr::select(State, Value, `Ag District`, County, size) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city")
dta <- read_csv("Data/7) Cattle inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
mutate(size = case_when(`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (1 TO 9 HEAD)" ~ 5/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (10 TO 19 HEAD)" ~ 15/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (20 TO 49 HEAD)" ~ 35/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (50 TO 99 HEAD)" ~ 75/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (100 TO 199 HEAD)" ~ 150/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (200 TO 499 HEAD)" ~ 350/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (500 OR MORE HEAD)" ~ 750/750)) %>%
dplyr::select(State, Value, `Ag District`, County, size) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city")
dta
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), shape=20, alpha = 0.5, color = "blue") +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
d_inv
dta <- read_csv("Data/7) Cattle inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
mutate(size = case_when(`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (1 TO 9 HEAD)" ~ 5/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (10 TO 19 HEAD)" ~ 15/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (20 TO 49 HEAD)" ~ 35/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (50 TO 99 HEAD)" ~ 75/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (100 TO 199 HEAD)" ~ 150/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (200 TO 499 HEAD)" ~ 350/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (500 OR MORE HEAD)" ~ 750/750)) %>%
dplyr::select(State, Value, `Ag District`, County, size) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") #%>%
#group_by(state_county) %>%
#summarize(Value = sum(Value), size) %>%
#ungroup()
#%>%
#  mutate(Value = round(Value/25)) %>%
#  dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get number of point per county
rm(p_dta, p_dta0)
for (i in 1:nrow(dta)){
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i],
size = dta$size[i])
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
us_county_map <- map_data('county')
us_state_map <- map_data('state')
d_inv <- ggplot() +
geom_polygon(data=us_county_map, aes(x=long, y=lat, group = group), fill = NA, color = "gray") +
geom_point(data = p_dta, mapping = aes(longitude, latitude, size = size), shape=20, alpha = 0.5, color = "blue") +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
d_inv
d_inv
dta$size
knitr::opts_chunk$set(echo=FALSE, fig.keep='high', out.width = '95%', fig.align = 'center', dev='cairo_pdf', warning = FALSE, message = FALSE)
#Load some packages
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(lubridate)
pacman::p_load(readxl)
pacman::p_load(Quandl)
pacman::p_load(viridis)
pacman::p_load(Cairo)
options(kableExtra.latex.load_packages = TRUE)
pacman::p_load(kableExtra)
pacman::p_load(ggmap)
pacman::p_load(sp)
pacman::p_load(usmap)
pacman::p_load(maps)
#Authentification
#Quandl.api_key("2xcmYFJoJKuEDwawuV7J")
#Basic setup for figures
source("Figures/Graph parameters.r")
dta <- read_csv("Data/7) Cattle inventory by county.csv")
dta <- dta %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII") %>%
mutate(size = case_when(`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (1 TO 9 HEAD)" ~ 5/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (10 TO 19 HEAD)" ~ 15/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (20 TO 49 HEAD)" ~ 35/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (50 TO 99 HEAD)" ~ 75/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (100 TO 199 HEAD)" ~ 150/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (200 TO 499 HEAD)" ~ 350/750,
`Domain Category` == "INVENTORY OF CATTLE, INCL CALVES: (500 OR MORE HEAD)" ~ 750/750)) %>%
dplyr::select(State, Value, `Ag District`, County, size) %>%
mutate(Value = str_replace_all(Value, ",", ""),
Value = round(as.numeric(Value)),
state_county = paste(tolower(State), tolower(County), sep = "_"),
state_county = str_replace(state_county, "_saint", "_st"),
state_county = str_replace(state_county, "_st[.]", "_st"),
state_county = str_replace(state_county, "le flore", "leflore"),
state_county = str_replace(state_county, "oklahoma_leflore", "oklahoma_le flore"),
state_county = str_replace(state_county, "suffolk city", "suffolk"),
state_county = str_replace(state_county, "o brien", "obrien"),
state_county = str_replace(state_county, "virginia beach city", "virginia beach")) %>%
dplyr::filter(!is.na(Value), Value>0,
state_county != "arizona_lapaz",
state_county != "south dakota_oglala lakota",
state_county != "virginia_chesapeake city") #%>%
#group_by(state_county) %>%
#summarize(Value = sum(Value), size) %>%
#ungroup()
#%>%
#  mutate(Value = round(Value/25)) %>%
#  dplyr::filter(!is.na(Value), Value>0)
# Get county and state boundaries
countyShapes <- map("county", plot = FALSE, fill = TRUE)
countyShapes <- fortify(countyShapes)
countyShapes <- countyShapes %>%
mutate(state_county = paste(tolower(region), tolower(subregion), sep = "_"))
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
i <- 1
countyShapeFrame <- countyShapes[countyShapes$state_county == dta$state_county[i], ]
countyPoly <- Polygons(lapply(split(countyShapeFrame[, c("long", "lat")], countyShapeFrame$group), Polygon), ID = "b")
spsample(countyPoly, n = dta$Value[i], "random")
spsample(countyPoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state_county = dta$state_county[i],
size = dta$size[i])
fig <- image_read("https://www.extension.iastate.edu/agdm/livestock/html/images/b1-36tbl1.gif")
pacman::p_load(magick)
fig <- image_read("https://www.extension.iastate.edu/agdm/livestock/html/images/b1-36tbl1.gif")
image_write(fig, path = "Figures/7) Return finishing steer.png", format = "png")
if(Sys.time() - file.info("Figures/7) Return finishing steer.png")$mtime > months(1, abbreviate = FALSE)){
fig <- image_read("https://www.extension.iastate.edu/agdm/livestock/html/images/b1-36tbl1.gif")
image_write(fig, path = "Figures/7) Return finishing steer.png", format = "png")
}
knitr::include_graphics("Figures/7) Return finishing steer.png")
knitr::opts_chunk$set(echo=FALSE, fig.keep='high', out.width = '95%', fig.align = 'center', dev='cairo_pdf', warning = FALSE, message = FALSE)
#Load some packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse)
pacman::p_load(lubridate)
pacman::p_load(readxl)
pacman::p_load(Quandl)
pacman::p_load(viridis)
pacman::p_load(Cairo)
options(kableExtra.latex.load_packages = TRUE)
pacman::p_load(kableExtra)
pacman::p_load(ggmap)
pacman::p_load(sp)
pacman::p_load(usmap)
pacman::p_load(maps)
pacman::p_load(magick)
#Authentification
#Quandl.api_key("2xcmYFJoJKuEDwawuV7J")
#Basic setup for figures
source("Figures/Graph parameters.r")
knitr::include_graphics("Figures/7) Return farrow to finish.png")
