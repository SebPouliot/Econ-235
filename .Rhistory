dta <- dta %>% dplyr::filter(year==1990)
dta <- dta %>% dplyr::select(Date, Settle, contract, date)
for (i in 1991:2017){
dta0 <- Quandl(paste("CME/CZ", i, sep=""), type="raw")
dta0 <- tbl_df(dta0)
dta0 <- mutate(dta0,
contract = as.character(i),
Settle = Settle/100,
year = as.numeric(substr(Date, 1, 4)),
week = 1:nrow(dta0),
day = day(Date),
month = month(Date),
date = paste("2008", month(Date), sep="-") %>% paste(day(Date), sep="-") %>% as.Date("%Y-%m-%d"))
dta0 <- dta0 %>% dplyr::filter(year==i)
dta0 <- dta0 %>% dplyr::select(Date, Settle, contract, date)
dta <- rbind(dta, dta0)
}
rm(dta0, i)
dta2 <- dta %>% dplyr::filter(contract=="2017" | contract=="2016" | contract=="2015" | contract=="2014" | contract=="2013")
corn_plot <- ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5)) +
theme_bw() +
mytheme + theme(axis.title.x = element_blank(), axis.line = element_line(color='black'))
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1)
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)")
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b"))
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5))
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5)) +
theme_bw()
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5)) +
theme_bw() +
mytheme
mytheme
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5)) +
theme_bw()
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5)) +
theme_bw() +
mytheme
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5)) +
theme_bw() +
theme(plot.title = element_text(size = 10, colour = 'black', family = "Times New Roman"),
text=element_text(size=10, family = "Times New Roman", colour = 'black'),
axis.ticks.x = element_line(color='black'),
axis.ticks.y = element_line(color='black'),
axis.text.y = element_text(colour = 'black', family = "Times New Roman"),
axis.text.x = element_text(size = 10, colour = 'black', family = "Times New Roman"),
panel.border = element_blank(),
axis.line.x = element_line(color='black'),
axis.line.y = element_line(color='black'),
plot.margin=unit(c(0.5,0.5,0.5,0.5), "lines"),
legend.title=element_blank(),
legend.text = element_text(size = 8, colour = 'black', family = "Times New Roman"),
legend.background=element_blank(),
legend.key=element_blank(),
legend.position="bottom")
source("figures/Graph parameters.r")
ggplot(data = dta, aes(x = date, y = Settle, group = contract)) +
geom_line( colour = "gray70") +
geom_line(data=dta2, aes(y = Settle, colour = contract), size=1) +
scale_color_viridis(discrete = TRUE) +
ylab("Price ($/bu)") +
scale_x_date(date_breaks="1 month", date_minor_breaks="1 month", labels=date_format("%b")) +
scale_y_continuous(breaks = 2:8, minor_breaks = seq(2, 8, by = 0.5)) +
theme_bw() +
mytheme +
theme(axis.title.x = element_blank(), axis.line = element_line(color='black'))
pacman::p_load(ggplot2)
pacman::p_load(grid)#for arrow in graph
suppressMessages(pacman::p_load(gridExtra))
pacman::p_load(scales)
pacman::p_load(ggthemes)
suppressMessages(pacman::p_load(extrafont))
pacman::p_load(ggplot2)
pacman::p_load(grid)#for arrow in graph
suppressMessages(pacman::p_load(gridExtra))
pacman::p_load(scales)
pacman::p_load(ggthemes)
suppressMessages(pacman::p_load(extrafont)) #The package extrafont imports fonts that can be used with ggplot2
font_import()
pacman::p_load(viridis)
install.packages(c("bit", "broom", "caTools", "data.table", "dbplyr", "devtools", "dplyr", "evaluate", "ggplot2", "git2r", "glue", "haven", "highr", "lambda.r", "maptools", "munsell", "openssl", "pillar", "purrr", "Rcpp", "reprex", "rJava", "rlang", "rmarkdown", "scales", "stringi", "stringr", "tidyr", "tinytex", "utf8", "xlsx", "yaml", "zoo"))
pacman::p_load(ggplot2)
pacman::p_load(grid)#for arrow in graph
suppressMessages(pacman::p_load(gridExtra))
pacman::p_load(scales)
pacman::p_load(ggthemes)
suppressMessages(pacman::p_load(extrafont)) #The package extrafont imports fonts that can be used with ggplot2
font_import()
pacman::p_load(viridis)
font_import()
font_import()
#Load some packages
library(pacman)
pacman::p_load(dplyr)
pacman::p_load(magrittr)
suppressMessages(pacman::p_load(reshape2))
pacman::p_load(Quandl)
suppressMessages(pacman::p_load(lubridate))
pacman::p_load(viridis)
pacman::p_load(Cairo)
#Load some packages
library(pacman)
pacman::p_load(dplyr)
pacman::p_load(magrittr)
suppressMessages(pacman::p_load(reshape2))
pacman::p_load(Quandl)
suppressMessages(pacman::p_load(lubridate))
pacman::p_load(viridis)
pacman::p_load(Cairo)
#Load some packages
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(Quandl)
pacman::p_load(viridis)
pacman::p_load(Cairo)
options(kableExtra.latex.load_packages = TRUE)
pacman::p_load(kableExtra)
dta <- read_csv("Data/7) Cattle inventory by state")
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta %>%
dplyr::select(State, Value)
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta <- dta %>%
dplyr::select(State, Value) %>%
mutate(Value = Value/1000)
us <- map_data("state")
us
pacman::p_load(sp)
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
stateShapes
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes
class(stateShapes)
str(stateShapes)
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
stateShapes
stateShapeFrame <- stateShapes[stateShapes$region == "alabama", ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
statePoly
class(statePoly)
spsample(statePoly, n = 10, "nonaligned")
points(spsample(statePoly, n = 10000 "nonaligned"))
plot(statePoly)
plot(statePoly)
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta <- dta %>%
dplyr::select(State, Value) %>%
mutate(Value = Value/1000)
dta
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta <- dta %>%
dplyr::select(State, Value) %>%
mutate(Value = round(Value/1000))
dta
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[1]), ]
i <- 1
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
spsample(statePoly, n = 10000 "nonaligned") %>%
spsample(statePoly, n = 10000 "nonaligned") %>%
spsample(statePoly, n = 10000, "nonaligned") %>%
as.data.frame()
spsample(statePoly, n = 10, "nonaligned") %>%
rename(longitude = x1)
spsample(statePoly, n = 10, "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1)
spsample(statePoly, n = 10, "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2)
exists(p_dta)
?exists
is.null(p_dta)
!is.null(p_dta)
!is.null("p_dta")
if(!is.null("p_dta")){p_dta <- p_dta0}
p_dta0 <- spsample(statePoly, n = 10, "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
if(!is.null("p_dta")){p_dta <- p_dta0}
p_dta0
spsample(statePoly, n = 10, "nonaligned")
spsample(statePoly, n = 10, "nonaligned")
spsample(statePoly, n = 10, "nonaligned")
spsample(statePoly, n = 10, "nonaligned")
spsample(statePoly, n = 10, "nonaligned")
spsample(statePoly, n = 10, "nonaligned")
spsample(statePoly, n = 10, "nonaligned")
?spsample
dta
p_dta0 <- spsample(statePoly, n = dta$Value[i], "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
p_dta0
rm(p_dta)
is.null("p_dta")
!is.null("p_dta")
exists("p_dta")
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
if(!exists("p_dta")){p_dta <- p_dta0}
exists("p_dta")
dta
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta <- dta %>%
dplyr::select(State, Value) %>%
mutate(Value = round(Value/1000)) %>%
dplyr::filter(State != "ALASKA")
rm(p_dta)
for (i in 1:nrow(dta)){
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
View(dta)
View(p_dta)
View(dta)
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta <- dta %>%
dplyr::select(State, Value) %>%
mutate(Value = round(Value/1000)) %>%
dplyr::filter(State != "ALASKA" & State != "ALASKA")
# Get state boundaries
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get random number of point per state
for (i in 1:nrow(dta)){
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
View(p_dta)
View(dta)
rm(p_dta)
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta <- dta %>%
dplyr::select(State, Value) %>%
mutate(Value = round(Value/1000)) %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII")
# Get state boundaries
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get random number of point per state
for (i in 1:nrow(dta)){
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "nonaligned") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
ggplot(p_dta, aes(x = latitute, y = longitude)) +
geom_point(color = "blue", size = 1)
p_dta
head(p_dta)
p_dta$latitude
class(p_dta$latitude)
class(p_dta$longitude)
ggplot(p_dta, aes(x = latitute, y = longitude)) +
geom_point(color = "blue", size = 1)
ggplot(p_dta, aes(x = latitute, y = longitude))
colnames(p_dta)
ggplot(p_dta, aes(x = latitute, y = longitude, color = state))
ggplot(p_dta, aes(y = longitude, x = latitute, color = state))
str(p_dta)
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=1, inherit.aes = FALSE)
ggplot() +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=1, inherit.aes = FALSE)
# Read data
dta <- read_csv("Data/7) Cattle inventory by state.csv")
dta <- dta %>%
dplyr::select(State, Value) %>%
mutate(Value = round(Value/1000)) %>%
dplyr::filter(State != "ALASKA" & State != "HAWAII")
# Get state boundaries
stateShapes <- map("state", plot = FALSE, fill = TRUE)
stateShapes <- fortify(stateShapes)
# Get random number of point per state
for (i in 1:nrow(dta)){
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
rm(p_dta)
for (i in 1:nrow(dta)){
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
i <- 1
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x1, latitude = x2) %>%
mutate(state = tolower(dta$State[i]))
spsample(statePoly, n = dta$Value[i], "random") %>%
as.data.frame()
p_dta0 <- spsample(statePoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state = tolower(dta$State[i]))
for (i in 1:nrow(dta)){
stateShapeFrame <- stateShapes[stateShapes$region == tolower(dta$State[i]), ]
statePoly <- Polygons(lapply(split(stateShapeFrame[, c("long", "lat")], stateShapeFrame$group), Polygon), ID = "b")
p_dta0 <- spsample(statePoly, n = dta$Value[i], "random") %>%
as.data.frame() %>%
rename(longitude = x, latitude = y) %>%
mutate(state = tolower(dta$State[i]))
if(!exists("p_dta")){p_dta <- p_dta0}
if(exists("p_dta")){p_dta <- rbind(p_dta,p_dta0)}
}
ggplot() +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=1, inherit.aes = FALSE)
?geom_point
ggplot() +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, inherit.aes = FALSE)
ggplot() +
geom_map(data=us, map=us,  aes(x=long, y=lat, map_id=region)
)
us <- map_data("state")
ggplot() +
geom_map(data=us, map=us,  aes(x=long, y=lat, map_id=region))
ggplot() +
geom_map(data=us, map=us,  aes(x=long, y=lat, map_id=region))
ggplot() +
geom_map(data=us, map=us,  aes(x=long, y=lat, map_id=region), fill= "white")
pacman::p_load(usmap)
plot_usmap(regions = "states")
plot_usmap
?plot_usmap
plot_usmap(regions = "states", labels = TRUE)
plot_usmap(regions = "states") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, inherit.aes = FALSE)
plot_usmap(regions = "states")
plot_usmap(regions = "states") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20)
ggplot() + geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20)
plot_usmap(regions = "states")
stateShapes
ggplot(stateShapes, x = long, y = lat, group = region)
ggplot(stateShapes, x = long, y = lat, group = region) +
geom_line()
us_state_map <- map_data('state')
ggplot(data=us_state_map, aes(x=long, y=lat, group = group)) +
geom_polygon()
ggplot(data=us_state_map, aes(x=long, y=lat, group = group)) +
geom_polygon(fill = NA)
ggplot(data=us_state_map, aes(x=long, y=lat, group = group)) +
geom_polygon(fill = NA, color = "black")
ggplot(data=us_state_map, aes(x=long, y=lat, group = group)) +
geom_polygon(fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20)
ggplot(data=us_state_map, aes(x=long, y=lat)) +
geom_polygon(fill = NA, color = "black")
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black")
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20)
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.5)
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25)
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25) +
coord_map( "polyconic" )
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25) +
coord_map( "polyconic" ) +
geom_text(data = values, aes(x = x, y = y, label = value, group = NULL), size = 1.5)
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25) +
coord_map( "polyconic" ) +
theme_bw() +
mytheme
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25) +
coord_map( "polyconic" ) +
theme_bw()
source("Figures/Graph parameters.r")
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25) +
coord_map( "polyconic" ) +
theme_bw() +
mytheme
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25) +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
ggplot() +
geom_polygon(data=us_state_map, aes(x=long, y=lat, group = group), fill = NA, color = "black") +
geom_point(data = p_dta, mapping = aes(longitude, latitude), shape=20, size = 0.25, alpha = 0.5, color = "blue") +
coord_map( "polyconic" ) +
theme_bw() +
mytheme +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
panel.spacing.x=unit(-2, "lines"),
panel.spacing.y=unit(0,"lines"),
plot.margin=unit(c(0,-1,0,-1),"lines"),
legend.text=element_text(size=8),
legend.key.width = unit(0.4, "cm"),
legend.key.height = unit(0.4, "cm"))
