exp <- c("income")
### Use all the observations ###
dta_est <- dta %>%
dplyr::filter(complete.cases(.)) %>%
data.frame
est <- aidsEst(priceNames, shareNames, exp, data = dta_est, method = "IL")
elast_m_all <- diag(elas(est, method = "AIDS", observedShares = TRUE)$marshall)
names(elast_m_all) <- c("Home", "Away", "Non-food")
elast_inc_all <- elas(est, method = "AIDS", observedShares = TRUE)$exp
names(elast_inc_all) <- c("Home", "Away", "Non-food")
### Loop through clusters ###
elast_m <- data.frame(home=numeric(),
away=numeric(),
other=numeric(),
stringsAsFactors=FALSE)
elast_inc <- data.frame(home=numeric(),
away=numeric(),
other=numeric(),
stringsAsFactors=FALSE)
for (i in 1:50){
dta_est <- dta %>%
dplyr::filter(cluster == i) %>%
dplyr::filter(complete.cases(.)) %>%
data.frame
est <- aidsEst(priceNames, shareNames, exp, data = dta_est, method = "IL")
elast_m[i,] <- diag(elas(est, method = "AIDS", observedShares = TRUE)$marshall)
elast_inc[i,] <- elas(est, method = "AIDS", observedShares = TRUE)$exp
}
elast_m_cluster <- colMeans(elast_m)
names(elast_m_cluster) <- c("Home", "Away", "Non-food")
elast_inc_cluster <- colMeans(elast_inc)
names(elast_inc_cluster) <- c("Home", "Away", "Non-food")
### Tables of results
stargazer(signif(elast_m_all,3), summary = FALSE, title = "Marshallian elasticities - pool model", header=FALSE)
stargazer(signif(elast_inc_all,3), summary = FALSE, title = "Income elasticities - pool model", header=FALSE)
stargazer(signif(elast_m_cluster,3), summary = FALSE, title = "Marshallian elasticities - cluster model", header=FALSE)
stargazer(signif(elast_inc_cluster,3), summary = FALSE, title = "Income elasticities - cluster model", header=FALSE)
elast_m
elast_m %>% gather
ggplot(data=elast_m %>% gather, aes(value))
ggplot(data=elast_m %>% gather, aes(value)) +
geom_histogram()
ggplot(data=elast_m %>% gather, aes(value)) +
geom_histogram(col="red",
fill="green",
alpha = .2)
ggplot(data=elast_m %>% gather, aes(value)) +
geom_histogram(col="red",
fill="green",
alpha = .2) +
geom_density(col=2)
?geom_histogram
ggplot(data=elast_m %>% gather, aes(value)) +
geom_histogram(aes(y =..density..),
col="red",
fill="green",
alpha = .2) +
geom_density(col=2)
ggplot(data=elast_m %>% gather, aes(value)) +
geom_histogram(aes(y =..density..),
col="red",
fill="green",
alpha = .2) +
geom_density(col=2) +
facet_grid(key~., scales = "free") +
labs(title="Distribution of own price elasticities of demand") +
labs(x="", y="")
ggplot(data=elast_m %>% gather, aes(value)) +
geom_histogram(aes(y =..density..),
col="red",
fill="green",
alpha = .2) +
geom_density(col=2) +
facet_grid(key~.) +
labs(title="Distribution of own price elasticities of demand") +
labs(x="", y="")
ggplot(data=elast_m %>% gather, aes(value)) +
geom_histogram(aes(y =..density..),
col="red",
fill="green",
alpha = .2) +
geom_density(col=2) +
facet_grid(key~., scales = "free") +
labs(title="Distribution of own price elasticities of demand") +
labs(x="", y="")
ggplot(data=elast_m %>% gather %>% dplyr::filter(key != "other"), aes(value)) +
geom_histogram(aes(y =..density..),
col="red",
fill="green",
alpha = .2) +
geom_density(col=2) +
facet_grid(key~., scales = "free") +
labs(title="Distribution of own price elasticities of demand") +
labs(x="", y="")
ggplot(data=elast_m %>% gather %>% dplyr::filter(key != "other"), aes(value)) +
geom_histogram(aes(y =..density..),
col="red",
fill="green",
alpha = .2,
bins = 12) +
geom_density(col=2) +
facet_grid(key~., scales = "free") +
labs(title="Distribution of own price elasticities of demand") +
labs(x="", y="")
ggplot(data=elast_m %>% gather %>% dplyr::filter(key != "other"), aes(value)) +
geom_histogram(aes(y =..density..),
col="red",
fill="green",
alpha = .2,
bins = 11) +
geom_density(col=2) +
facet_grid(key~., scales = "free") +
labs(title="Distribution of own price elasticities of demand") +
labs(x="", y="")
#Clear memory
rm(list = ls())
#Read and prepare FooDS data
coltype <- rep("numeric", 140)
coltype[1:4] <- c("text", "text", "date", "date")
dta = suppressWarnings(read_excel("FooDS.xlsx", skip = 1, col_types = coltype))
rm(coltype)
dta <- dta %>%
rename(ResponseID = V1, DayofWeek = X__1, StartDate = V8, EndDate = V9) %>%
dplyr::filter(DayofWeek != "DayofWeek",
!is.na(DayofWeek),
!is.na(LocationLongitude),
!is.na(LocationLatitude)) %>%
dplyr::select(-X__2)
### To get the State names based on the coordinates ###
pacman::p_load(sp)
pacman::p_load(rgdal)
pacman::p_load(USAboundaries)
#Shapefile for US States is from https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#Spatial
points <- SpatialPoints(cbind(dta$LocationLongitude, dta$LocationLatitude))
#SpatialPolygonDataFrame
states <- readOGR("cb_2016_us_state_5m/cb_2016_us_state_5m.shp")
#assume same proj as shapefile!
proj4string(points) <- proj4string(states)
#get county polygon point is in
dta$state <- as.character(over(points, states)$NAME)
rm(points, states)
#Regions
West <- c("Washington", "Oregon", "California", "Idaho", "Montana", "Wyoming", "Nevada", "Utah", "Colorado", "Arizona", "New Mexico")
Midwest <- c("North Dakota", "South Dakota", "Nebraska", "Kansas", "Minnesota", "Iowa", "Missouri", "Wisconsin", "Illinois", "Indiana", "Michigan", "Ohio")
South <- c("Texas", "Oklahoma", "Arizona", "Louisiana", "Tennessee", "Mississippi", "Alabama", "Georgia", "Florida", "South Carolina", "North Carolina", "Kentucky", "West Virginia", "Virginia", "Maryland", "Delaware", "District of Columbia")
dta <- dta %>% mutate(region = case_when(
state %in% West ~ "West",
state %in% Midwest ~ "Midwest",
state %in% South ~ "South",
TRUE ~ "Northeast")) %>%
mutate(date = as.Date(StartDate), year = year(date), month = month(date))
#Package to download data from BLS using API
pacman::p_load(blsAPI)
pacman::p_load(rjson)
#Consumer price index for food at home
series_id <- c("CUUR0100SA0L1", "CUUR0100SAF11", "CUUR0100SEFV", "CUUR0200SA0L1", "CUUR0200SAF11", "CUUR0200SEFV", "CUUR0300SA0L1", "CUUR0300SAF11", "CUUR0300SEFV", "CUUR0400SA0L1", "CUUR0400SAF11", "CUUR0400SEFV")
items <- rep(c("All items less food", "Food at home", "Food away from home"), 4)
regions <- rep(c("Northeast", "Midwest", "South", "West"), 1, each = 3)
cpi <- data.frame(year=character(),
period=character(),
periodName=character(),
value=character(),
item=character(),
region=character(),
stringsAsFactors=FALSE)
for (k in 1:12){
payload <- list(
'seriesid'=c(series_id[k]),
'startyear'=2013,
'endyear'=2017,
'catalog'=FALSE,
'calculations'=FALSE,
'annualaverage'=FALSE,
'registrationKey'='fa397946380f4a27acf5b4dd3869f3e7')
json <- blsAPI(payload, 2) %>% fromJSON
df <- data.frame(year=character(),
period=character(),
periodName=character(),
value=character(),
item=character(),
region=character(),
stringsAsFactors=FALSE)
i <- 0
for(d in json$Results$series[[1]]$data){
i <- i + 1
df[i,1:4] <- unlist(d)[1:4]
df[i, "item"] <- items[k]
df[i, "region"] <- regions[k]
}
cpi <- rbind(cpi, df)
rm(df)
}
cpi <- cpi %>%
dplyr::filter(periodName != "Annual") %>%
mutate(date = paste(year, periodName, "01", sep = "-"), date = ymd(date), month = month(date), year = as.numeric(year)) %>%
dplyr::select(year, month, item, region, value) %>%
spread(key = item, value = value) %>%
rename(p_other = `All items less food`, p_home = `Food at home`, p_away = `Food away from home`)
df <- left_join(dta, cpi)
left_join(dta, cpi)
cpi
names(dta)
dta$month
class(dta$month)
library(ggplot2)
cpi
cpi %>%
mutate(date = ymd(paste(year, month, "01"), sep = "-")))
cpi %>%
mutate(date = ymd(paste(year, month, "01", sep = "-")))
ggplot2(cpi2, aea(x = date, y = p_home, color = region)) + geom_line()
ggplot(cpi2, aea(x = date, y = p_home, color = region)) + geom_line()
cpi2 <- cpi %>%
mutate(date = ymd(paste(year, month, "01", sep = "-")))
ggplot(cpi2, aea(x = date, y = p_home, color = region)) + geom_line()
ggplot(cpi2, aes(x = date, y = p_home, color = region)) + geom_line()
cpi2
ggplot(cpi2, aes(x = date, y = p_home, color = region)) + geom_line()
cpi2
cpi2 <- cpi %>%
mutate(date = ymd(paste(year, month, "01", sep = "-")), p_home = as.numeric(p_home))
ggplot(cpi2, aes(x = date, y = p_home, color = region)) + geom_line()
cpi2 <- cpi %>%
mutate(date = ymd(paste(year, month, "01", sep = "-")), p_home = as.numeric(p_home), p_away = as.numeric(p_away), p_other = as.numeric(p_other))
ggplot(cpi2, aes(x = date, y = p_home, color = region)) + geom_line()
ggplot(cpi2, aes(x = date, y = p_away, color = region)) + geom_line()
ggplot(cpi2, aes(x = date, y = p_other, color = region)) + geom_line()
ggplot(cpi2, aes(x = date, y = p_home, color = region)) + geom_line()
aidsEst
?aidsEst
rm(list = ls())
gc()
library(dplyr)
library(magrittr)
library(ggplot2)
library(reshape2)
library(grid)#for arrow in graph
library(gridExtra)
library(scales)
library(lubridate)
library(readr)
library(stringr)
library(readxl)
library(xlsx)
library(Quandl)
library(viridis)
library(extrafont)
loadfonts() #Load the fonts
source("D:/Box Sync/Graph parameters.R")
setwd("D:/Box Sync/Teaching/Econ 235/Econ 235 - Fall 2017/Slides")
viridis(3)
rm(list = ls())
gc()
#Retail price data
load("egg_data.RData")
dta_r <- dta %>%
filter(region == "MIDWEST", type == "CONVENTIONAL", form == "SHELL", description %in% c("WHITE, A, LARGE, DOZ.")) %>%
dplyr::select(-region, -type, -form, -low_price, -high_price, -description, -stores) %>%
rename(price = avg_price) %>%
dplyr::filter(date>="2010-01-01") %>%
mutate(week = 1+ (as.numeric(date) - 14617)/7) %>% mutate(stage = "Retail")
rm(dta)
#Wholesale
load("egg_wholesale_data.RData")
dta_w <- dta %>%
dplyr::select(1:10) %>%
dplyr::filter(class == "LARGE",market == "IOWA-MINNESOTA-WISCONSIN", delivery == "PAID TO PRODUCERS") %>%
mutate(avg_price = (mostly_low+mostly_high)/200)
dta_w <- dta_w %>%
mutate(week = trunc(1+ (as.numeric(date) - 14617)/7)) %>%
group_by(week) %>% summarize(price = mean(avg_price), date = min(date)) %>%
mutate(stage = "Wholesale")
#Merge data
dta <- rbind(dta_r, dta_w)
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_viridis(discrete = TRUE) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.35)
plot
plot <- plot + geom_smooth(se = FALSE, span=0.25)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_viridis(discrete = TRUE) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.25)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_viridis(discrete = TRUE) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.5)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_viridis(discrete = TRUE) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(viridis(3)[1:2]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
viridis(3)[1:2]
ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(3)[1:2]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(3)[1:2]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(4)[1:3]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(5)[1:4]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(5)[1:5]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(2)[1:2]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
viridis(2)
viridis(3)
viridis(8)
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(8)[1,7]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(8)[c(1,7)]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(5)[c(1,4)]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
plot <- ggplot(data=dta, aes(x=date, y=price, color = stage, shape = stage)) +
geom_point(size=0.5) +
ylab("Price ($/dozen)") +
scale_x_date(date_breaks="1 year", date_minor_breaks="1 months", labels=date_format("%Y")) +
scale_color_manual(values = viridis(5)[c(1,4)]) +
theme_bw()+
mytheme +
theme(legend.position=c(0.25, 0.75), axis.line.x = element_line(color='black'), axis.line.y = element_line(color='black'), axis.title.x=element_blank())
plot <- plot + geom_smooth(se = FALSE, span=0.4)
plot
ggsave(plot, filename = "Egg_retail_wholesale.png",  width = 6, height = 4, units = "in", dpi = 600)
knitr::opts_chunk$set(echo = TRUE)
#Load libraries
library(pacman)
pacman::p_load(tidyverse)
pacman::p_load(readr) #To read files faster -  helpful with big data files
pacman::p_load(readxl) #To read exel files
suppressMessages(pacman::p_load(xlsx, readxl)) #To read and write excel files
pacman::p_load(Cairo) #For font compatibility
pacman::p_load(systemfit)
pacman::p_load(texreg)
p_load(stargazer)
pacman::p_load(lubridate)
#Load file for figures - Change directory as needed
#suppressMessages(source("D:/Box Sync/Graph parameters.R"))
#set the working directory - change for it to work on your own computer.
knitr::opts_knit$set(root.dir = "D:/Box Sync/Teaching/Econ 641/Econ 641 - Fall 2017/Assignment 5")
#knitr::opts_knit$set(root.dir = "C:/Users/pouliot.IASTATE/Box Sync/Teaching/Econ 641/Econ 641 - Fall 2017/Assignment 5")
#Clear memory
rm(list = ls())
df = read_excel("Data for assignment 5.xlsx", sheet = "Data - clean") %>%
dplyr::filter(date >= as.Date("2013-06-01")) %>%
mutate(trend = as.numeric(date))
#Select data for construction of clusters
# Q51: Houselhold size
# Q48: Gender
# Q49: age
# Q61: race
# Q58: education
# Q59: income
# Q50: marital status
# Q4: Expenditure at grocery store
# Q5: Expenditure on food elsewhere
# Q10: Food challenges
#Calculate total food spending
df <- df %>%
mutate(F_home = case_when(
Q4 == 1 ~ 10,
Q4 == 2 ~ 30,
Q4 == 3 ~ 50,
Q4 == 4 ~ 70,
Q4 == 5 ~ 90,
Q4 == 6 ~ 110,
Q4 == 7 ~ 130,
Q4 == 8 ~ 150,
Q4 == 9 ~ 200),
F_away = case_when(
Q5 == 1 ~ 10,
Q5 == 2 ~ 30,
Q5 == 3 ~ 50,
Q5 == 4 ~ 70,
Q5 == 5 ~ 90,
Q5 == 6 ~ 110,
Q5 == 7 ~ 130,
Q5 == 8 ~ 150,
Q5 == 9 ~ 200),
F_total = F_home + F_away,
income = case_when(
Q59 == 1 ~ 10000/52,
Q59 == 2 ~ 30000/52,
Q59 == 3 ~ 50000/52,
Q59 == 4 ~ 70000/52,
Q59 == 5 ~ 90000/52,
Q59 == 6 ~ 110000/52,
Q59 == 7 ~ 130000/52,
Q59 == 8 ~ 150000/52,
Q59 == 9 ~ 200000/52),
s_home = F_home/income, s_away = F_away/income, s_other = 1-s_home-s_away) %>%
dplyr::filter(s_other >= 0)
#Select data for cluster analysis and prepare those data
df_cluster <- df %>%
dplyr::select(ResponseID, Q51, Q48, Q49, Q61, Q58, Q59, F_total, Q10_1:Q10_7, trend) %>%
dplyr::filter(complete.cases(.)) #Use only complete observations - no NAs for k-means
df_cluster
df_cluster$trend
df <- df %>%
dplyr::filter(ResponseID %in% df_cluster$ResponseID)
#Make each variable a mean zero and standard deviation of one
norm_func <-  function(x){
(x - mean(x))/sd(x)
}
df_cluster <- df_cluster %>%
dplyr::select(-ResponseID) %>%
mutate_all(norm_func)
df_cluster
